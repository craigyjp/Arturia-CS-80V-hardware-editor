//Values below are just for initialising and will be changed when synth is initialised to current panel controls & EEPROM settings
byte midiChannel = MIDI_CHANNEL_OMNI;//(EEPROM)
byte midiOutCh = 0;//(EEPROM)
int readresdivider = 2;

int MIDIThru = midi::Thru::Off;//(EEPROM)
String patchName = INITPATCHNAME;
boolean encCW = true;//This is to set the encoder to increment when turned CW - Settings Option

float volumeControl = 0;
float volumeControlstr = 0; // for display

float midiSync1 = 0;
float midiSync2 = 0;
float lfoMode1 = 0;
float lfoMode2 = 0;
float lfoWave1 = 0;
float lfoWave2 = 0;
float lfoSpeed1 = 0;
float lfoSpeed1str = 0; // for display
float lfoSpeed2 = 0;
float lfoSpeed2str = 0; // for display
float pwm1 = 0;
float pwm1str = 0;
float pwm2 = 0;
float pwm2str = 0;
float pw1 = 0;
float pw1str = 0;
float pw2 = 0;
float pw2str = 0;
float square1 = 0;
float square2 = 0;
float saw1 = 0;
float saw2 =0;
float noise1 = 0;
float noise1str = 0;
float noise2 =0;
float noise2str = 0;
float db241 = 0;
float db242 = 0;
float hpf1 = 0;
float hpf2 =  0;
float lpf1 = 0;
float lpf2 =  0;
float hpfCutoff1 = 0;
float hpfCutoff1str = 0;
float hpfCutoff2 =0;
float hpfCutoff2str = 0;
float hpfRes1 = 0;
float hpfRes1str = 0;
float hpfRes2 =0;
float hpfRes2str = 0;
float lpfCutoff1 = 0;
float lpfCutoff1str = 0;
float lpfCutoff2 =0;
float lpfCutoff2str = 0;
float lpfRes1 = 0;
float lpfRes1str = 0;
float lpfRes2 =0;
float lpfRes2str = 0;
float vcfIL1 = 0;
float vcfIL1str = 0;
float vcfIL2 =0;
float vcfIL2str = 0;
float vcfAL1 = 0;
float vcfAL1str = 0;
float vcfAL2 =0;
float vcfAL2str = 0;
float vcfAttack1 = 0;
float vcfAttack1str = 0;
float vcfAttack2 =0;
float vcfAttack2str = 0;
float vcfDecay1 = 0;
float vcfDecay1str = 0;
float vcfDecay2 =0;
float vcfDecay2str = 0;
float vcfRelease1 = 0;
float vcfRelease1str = 0;
float vcfRelease2 =0;
float vcfRelease2str = 0;
float vcfLevel1 = 0;
float vcfLevel1str = 0;
float vcfLevel2 =0;
float vcfLevel2str = 0;
float osc1Sine = 0;
float osc1Sinestr = 0;
float osc2Sine =0;
float osc2Sinestr = 0;
float ampAttack1 = 0;
float ampAttack1str = 1;
float ampDecay1 = 0;
float ampDecay1str = 1;
float ampSustain1 = 0;
float ampSustain1str = 1; // for display
float ampRelease1 = 0;
float ampRelease1str = 1;
float ampAttack2 = 0;
float ampAttack2str = 1;
float ampDecay2 = 0;
float ampDecay2str = 1;
float ampSustain2 = 0;
float ampSustain2str = 1; // for display
float ampRelease2 = 0;
float ampRelease2str = 1;
float vcaLevel1 = 0;
float vcaLevel1str = 0;
float vcaLevel2 =0;
float vcaLevel2str = 0;
float initial1Brill = 0;
float initial1Brillstr = 0;
float initial2Brill = 0;
float initial2Brillstr = 0;
float initial1Level =0;
float initial1Levelstr = 0;
float initial2Level =0;
float initial2Levelstr = 0;
float after1Brill = 0;
float after1Brillstr = 0;
float after2Brill = 0;
float after2Brillstr = 0;
float after1Level =0;
float after1Levelstr = 0;
float after2Level =0;
float after2Levelstr = 0;
float subWheel = 0;
float detune = 0;
float detunestr = 0;
float ringAttack = 0;
float ringDecay = 0;
float ringDepth = 0;
float ringSpeed = 0;
float ringMod = 0;
float ringAttackstr = 0;
float ringDecaystr = 0;
float ringDepthstr = 0;
float ringSpeedstr = 0;
float ringModstr = 0;
float function =0;
float subSpeed = 0;
float subSpeedstr = 0;
float subVCO = 0;
float subVCOstr = 0;
float subVCF = 0;
float subVCFstr = 0;
float subVCA = 0;
float subVCAstr = 0;
float feet1 = 0;
String feet1str = "";
float feet2 = 0;
String feet2str = "";
float mix = 0;
float mixstr = 0;
float mixstr2 = 0;
float brill = 0;
float brillstr = 0;
float reso = 0;
float resostr = 0;
float touchPbend = 0;
float touchPbendstr = 0;
float touchSpeed = 0;
float touchSpeedstr = 0;
float touchVCO = 0;
float touchVCOstr = 0;
float touchVCF = 0;
float touchVCFstr = 0;
float brillLow = 0;
float brillLowstr = 0;
float brillHigh = 0;
float brillHighstr = 0;
float levelLow = 0;
float levelLowstr = 0;
float levelHigh = 0;
float levelHighstr = 0;
float link = 0;
float sync = 0;
float arpSync = 0;
float arpSpeed = 0;
float arpSpeedstr = 0;
float arpPlay = 0;
float arpHold = 0;
float arpMode = 0;
float arpOctave = 0;
float arpRepeat = 0;
float expression = 0;
float expwah = 0;
float sustLongShort = 0;
float sustLongShortstr = 0;
float glissLongShort = 0;
float glissLongShortstr = 0;
float sust = 0;
float portaGliss = 0;
float sustMode = 0;
float gliss = 0;
float chorusSpeed = 0;
float chorusSpeedstr = 0;
float tremeloOn = 0;
float chorusDepth = 0;
float chorusDepthstr = 0;
float chorusOn = 0;
float delaySpeed = 0;
float delaySpeedstr = 0;
float delayOn = 0;
float delayDepth = 0;
float delayDepthstr = 0;
float delayMix = 0;
float delayMixstr = 0;
float delaySync = 0;
float ribbonCoursestr = 0;
float ribbonCourse = 0;
float ribbonPitch= 0;
float modWheelLevel = 0;
float modWheelLevelstr = 0;

int returnvalue = 0;
float keytrackingAmount = 0.5f;
float pitchBendRange = 12;
float modWheelDepth = 0.2f;
float modWhAmt = 0.0f;
int velocitySens = 0;

String CS80LFOWaveform1 = "                ";
String CS80LFOWaveform2 = "                ";
String syncSpeed = "          ";

boolean vuMeter = false;

//Pick-up - Experimental feature
//Control will only start changing when the Knob/MIDI control reaches the current parameter value
//Prevents jumps in value when the patch parameter and control are different values
boolean pickUp = false;//settings option (EEPROM)
boolean pickUpActive = false;
#define TOLERANCE 2 //Gives a window of when pick-up occurs, this is due to the speed of control changing and Mux reading
